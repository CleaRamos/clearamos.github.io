class Renderer{constructor(canvas){this._canvas=canvas;this._objects=[];this._clearColor={r:0,g:56/255,b:101/255,a:1};}
async init(){if(!navigator.gpu){throw Error("WebGPU is not supported in this browser.");}
const adapter=await navigator.gpu.requestAdapter();if(!adapter){throw Error("Couldn't request WebGPU adapter.");}
this._device=await adapter.requestDevice();this._context=this._canvas.getContext("webgpu");this._canvasFormat=navigator.gpu.getPreferredCanvasFormat();this._context.configure({device:this._device,format:this._canvasFormat,});this.resizeCanvas();window.addEventListener('resize',this.resizeCanvas.bind(this));}
resizeCanvas(){const devicePixelRatio=window.devicePixelRatio||1;const width=window.innerWidth*devicePixelRatio;const height=window.innerHeight*devicePixelRatio;this._canvas.width=width;this._canvas.height=height;this._canvas.style.width=`${window.innerWidth}px`;this._canvas.style.height=`${window.innerHeight}px`;this._canvas.style.transformOrigin="center";this.render();}
async appendSceneObject(obj){await obj.init();this._objects.push(obj);}
async removeSceneObject(obj){this._objects=this._objects.filter(item=>item!==obj);}
renderToSelectedView(outputView){for(const obj of this._objects){obj?.updateGeometry();}
let encoder=this._device.createCommandEncoder();const pass=encoder.beginRenderPass({colorAttachments:[{view:outputView,clearValue:this._clearColor,loadOp:"clear",storeOp:"store",}]});for(const obj of this._objects){obj?.render(pass);}
pass.end();const computePass=encoder.beginComputePass();for(const obj of this._objects){obj?.compute(computePass);}
computePass.end();const commandBuffer=encoder.finish();this._device.queue.submit([commandBuffer]);}
render(){this.renderToSelectedView(this._context.getCurrentTexture().createView());}}
class SceneObject{static _objectCnt=0;constructor(device,canvasFormat){if(this.constructor==SceneObject){throw new Error("Abstract classes can't be instantiated.");}
this._device=device;this._canvasFormat=canvasFormat;SceneObject._objectCnt+=1;}
getName(){return this.constructor.name+" "+SceneObject._objectCnt.toString();}
async init(){await this.createGeometry();await this.createShaders();await this.createRenderPipeline();await this.createComputePipeline();}
async createGeometry(){throw new Error("Method 'createGeometry()' must be implemented.");}
updateGeometry(){}
loadShader(filename){return new Promise((resolve,reject)=>{const xhttp=new XMLHttpRequest();xhttp.open("GET",filename);xhttp.setRequestHeader("Cache-Control","no-cache, no-store, max-age=0");xhttp.onload=function(){if(xhttp.readyState===XMLHttpRequest.DONE&&xhttp.status===200){resolve(xhttp.responseText);}
else{reject({status:xhttp.status,statusText:xhttp.statusText});}};xhttp.onerror=function(){reject({status:xhttp.status,statusText:xhttp.statusText});};xhttp.send();});}
async createShaders(){throw new Error("Method 'createShaders()' must be implemented.");}
async createRenderPipeline(){throw new Error("Method 'createRenderPipeline()' must be implemented.");}
render(pass){throw new Error("Method 'render(pass)' must be implemented.");}
async createComputePipeline(){throw new Error("Method 'createComputePipeline()' must be implemented.");}
compute(pass){throw new Error("Method 'compute(pass)' must be implemented.");}}
class ParticleSystemObject extends SceneObject{constructor(device,canvasFormat,numParticles=4096,mode,img){super(device,canvasFormat);this._numParticles=numParticles;this._step=0;this._img=new Image();this._mode=mode;this._img.src=img;}
async createGeometry(){await this._img.decode();this._bitmap=await createImageBitmap(this._img);this._texture=this._device.createTexture({label:"Texture "+this.getName(),size:[this._bitmap.width,this._bitmap.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,});this._device.queue.copyExternalImageToTexture({source:this._bitmap},{texture:this._texture},[this._bitmap.width,this._bitmap.height]);this._sampler=this._device.createSampler({magFilter:"linear",minFilter:"linear"});await this.createParticleGeometry();}
async createParticleGeometry(){this._particles=new Float32Array(this._numParticles*6);console.log("HERE");this._particleBuffers=[this._device.createBuffer({label:"Particle Pose 1"+this.getName(),size:this._particles.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,}),this._device.createBuffer({label:"Particle Pose 2 "+this.getName(),size:this._particles.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,})];console.log("HERE2");this._device.queue.writeBuffer(this._particleBuffers[0],0,this._particles);this._step=0;console.log("HERE2.1");this.resetParticles();}
resetParticles(){let numAttrs=10;for(let i=0;i<this._numParticles;++i){let randLifespan=Math.random()*(255);this._particles[numAttrs*i+0]=(Math.random()*2-1);this._particles[numAttrs*i+1]=(Math.random()*2-1);this._particles[numAttrs*i+2]=this._particles[numAttrs*i+0];this._particles[numAttrs*i+3]=this._particles[numAttrs*i+1];this._particles[numAttrs*i+4]=0.000;this._particles[numAttrs*i+4]=Math.random()*(0.025)-0.0125;this._particles[numAttrs*i+5]=Math.random()*(0.025)-0.0125;this._particles[numAttrs*i+6]=randLifespan;0
this._particles[numAttrs*i+7]=randLifespan;this._particles[numAttrs*i+8]=this._particles[numAttrs*i+4]
this._particles[numAttrs*i+9]=this._particles[numAttrs*i+5]}
this._step=0;this._device.queue.writeBuffer(this._particleBuffers[this._step%2],0,this._particles);}
updateGeometry(){}
async createShaders(){let shaderCode=await this.loadShader("/shaders/particles.wgsl");this._shaderModule=this._device.createShaderModule({label:"Particles Shader "+this.getName(),code:shaderCode,});console.log("HERE2.5");this._bindGroupLayout=this._device.createBindGroupLayout({label:"Grid Bind Group Layout "+this.getName(),entries:[{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}}]});console.log("HERE3");this._pipelineLayout=this._device.createPipelineLayout({label:"Particles Pipeline Layout",bindGroupLayouts:[this._bindGroupLayout],});}
async createRenderPipeline(){await this.createParticlePipeline();console.log("HERE4");}
async createParticlePipeline(){this._particlePipeline=this._device.createRenderPipeline({label:"Particles Render Pipeline "+this.getName(),layout:this._pipelineLayout,vertex:{module:this._shaderModule,entryPoint:"vertexMain",},fragment:{module:this._shaderModule,entryPoint:"fragmentMain",targets:[{format:this._canvasFormat,blend:{color:{srcFactor:'one',dstFactor:'one-minus-src-alpha',operator:'add',},alpha:{srcFactor:'one',dstFactor:'one-minus-src-alpha',operator:'add',},},}]},});this._particlePipeline02=this._device.createRenderPipeline({label:"Particles Render Pipeline "+this.getName(),layout:this._pipelineLayout,vertex:{module:this._shaderModule,entryPoint:"vertexMain02",},fragment:{module:this._shaderModule,entryPoint:"fragmentMain02",targets:[{format:this._canvasFormat,blend:{color:{srcFactor:'one',dstFactor:'one-minus-src-alpha',operator:'add',},alpha:{srcFactor:'one',dstFactor:'one-minus-src-alpha',operator:'add',},},}]},});this._particlePipeline03=this._device.createRenderPipeline({label:"Particles Render Pipeline "+this.getName(),layout:this._pipelineLayout,vertex:{module:this._shaderModule,entryPoint:"vertexMain02",},fragment:{module:this._shaderModule,entryPoint:"fragmentMain03",targets:[{format:this._canvasFormat,blend:{color:{srcFactor:'one',dstFactor:'one-minus-src-alpha',operator:'add',},alpha:{srcFactor:'one',dstFactor:'one-minus-src-alpha',operator:'add',},},}]},});console.log("HERE5");this._bindGroups=[this._device.createBindGroup({layout:this._particlePipeline.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this._particleBuffers[0]}},{binding:1,resource:{buffer:this._particleBuffers[1]}},{binding:2,resource:this._texture.createView(),},{binding:3,resource:this._sampler,}],}),this._device.createBindGroup({layout:this._particlePipeline.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this._particleBuffers[1]}},{binding:1,resource:{buffer:this._particleBuffers[0]}},{binding:2,resource:this._texture.createView(),},{binding:3,resource:this._sampler,}],})];console.log("HERE6");}
render(pass){if(this._mode==1){pass.setPipeline(this._particlePipeline);}
else if(this._mode==2){pass.setPipeline(this._particlePipeline02);}
else{pass.setPipeline(this._particlePipeline03);}
pass.setBindGroup(0,this._bindGroups[this._step%2]);pass.draw(128,this._numParticles);}
async createComputePipeline(){this._computePipeline=this._device.createComputePipeline({label:"Particles Compute Pipeline "+this.getName(),layout:this._pipelineLayout,compute:{module:this._shaderModule,entryPoint:"computeMain",}});this._computePipeline02=this._device.createComputePipeline({label:"Particles Compute Pipeline "+this.getName(),layout:this._pipelineLayout,compute:{module:this._shaderModule,entryPoint:"computeMain02",}});}
compute(pass){if(this._mode==1){pass.setPipeline(this._computePipeline);}
else{pass.setPipeline(this._computePipeline02);}
pass.setBindGroup(0,this._bindGroups[this._step%2]);pass.dispatchWorkgroups(Math.ceil(this._numParticles/256));++this._step}}
class StandardTextObject{constructor(inputText,spacing=5,textFont='18px Arial'){this._textFont=textFont;this._lineSpacing=spacing;this._textCanvas=document.createElement('canvas');this._textContext=this._textCanvas.getContext('2d');this.updateTextRegion(inputText);this.updateText(inputText);this._textCanvas.style.position='absolute';this._textCanvas.style.top='10px';this._textCanvas.style.left='10px';this._textCanvas.style.border='1px solid red';document.body.appendChild(this._textCanvas);}
toggleVisibility(){this._textCanvas.hidden=!this._textCanvas.hidden;}
updateTextRegion(newText){this._textContext.font=this._textFont;this._lines=newText.split('\n');this._width=Math.max(...this._lines.map(line=>this._textContext.measureText(line).width));const match=this._textFont.match(/(\d+)px/);if(match){this._fontSize=parseInt(match[1],10);}
else{this._fontSize=18;this._textFont="18px Arial";}
this._height=this._lines.length*(this._fontSize+this._lineSpacing);this._paddingx=5;this._paddingtop=3;this._canvasWidth=Math.ceil(this._width+this._paddingx*2);this._canvasHeight=Math.ceil(this._height+this._paddingtop);this._textCanvas.width=this._canvasWidth;this._textCanvas.height=this._canvasHeight;this._textContext.font=this._textFont;this._textContext.textBaseline='top';}
updateText(newText){this._lines=newText.split('\n');this._textContext.fillStyle='rgba(1, 1, 1, 0.5)';this._textContext.clearRect(0,0,this._canvasWidth,this._canvasHeight);this._textContext.fillRect(0,0,this._canvasWidth,this._canvasHeight);this._textContext.fillStyle='white';this._lines.forEach((line,idx)=>{const x=this._paddingx;const y=this._paddingtop+idx*(this._fontSize+this._lineSpacing);this._textContext.fillText(line,x,y);});}
setPosition(position){if(position=="top"){this._textCanvas.style.top='10px';this._textCanvas.style.bottom='';}
else{this._textCanvas.style.top='';this._textCanvas.style.bottom='10px';}}}
async function init(){const canvasTag=document.createElement('canvas');canvasTag.id="renderCanvas";document.body.appendChild(canvasTag);const renderer=new Renderer(canvasTag);await renderer.init();const particles=new ParticleSystemObject(renderer._device,renderer._canvasFormat,75000,1,"./assets/thisIsFine.jpg");await renderer.appendSceneObject(particles);const particles02=new ParticleSystemObject(renderer._device,renderer._canvasFormat,75000,1,"./assets/elmoFire.jpeg");const particles03=new ParticleSystemObject(renderer._device,renderer._canvasFormat,20000,2,"./assets/elmoFire.jpeg");const particles04=new ParticleSystemObject(renderer._device,renderer._canvasFormat,20000,3,"./assets/elmoFire.jpeg");window.addEventListener("keydown",(f)=>{switch(f.key){case'ArrowUp':case'f':case'F':renderer.appendSceneObject(particles);break;}});window.addEventListener("keydown",(e)=>{switch(e.key){case'ArrowUp':case'e':case'E':renderer.appendSceneObject(particles02);break;}});window.addEventListener("keydown",(r)=>{switch(r.key){case'ArrowUp':case'r':case'R':renderer.appendSceneObject(particles03);break;}});window.addEventListener("keydown",(i)=>{switch(i.key){case'ArrowUp':case'i':case'I':renderer.appendSceneObject(particles04);break;}});let fps='??';var fpsText=new StandardTextObject('fps: '+fps);var instrText=new StandardTextObject('Press the following keys toggle each mode: \nf/F: This is Fine \ne/E: Elmo \nr/R: Non-linear colored waterfall \ni/I: linearly colored waterfall');instrText.setPosition("bottom");var frameCnt=0;var tgtFPS=60;var secPerFrame=1./tgtFPS;var frameInterval=secPerFrame*1000;var lastCalled;let renderFrame=()=>{let elapsed=Date.now()-lastCalled;if(elapsed>frameInterval){++frameCnt;lastCalled=Date.now()-(elapsed%frameInterval);renderer.render();}
requestAnimationFrame(renderFrame);};lastCalled=Date.now();renderFrame();setInterval(()=>{fpsText.updateText('fps: '+frameCnt);frameCnt=0;},1000);return renderer;}
init().then(ret=>{console.log(ret);}).catch(error=>{const pTag=document.createElement('p');pTag.innerHTML=navigator.userAgent+"</br>"+error.message;document.body.appendChild(pTag);document.getElementById("renderCanvas").remove();});