class Renderer{constructor(canvas){this._canvas=canvas;this._objects=[];this._clearColor={r:0,g:56/255,b:101/255,a:1};}
async init(){if(!navigator.gpu){throw Error("WebGPU is not supported in this browser.");}
const adapter=await navigator.gpu.requestAdapter();if(!adapter){throw Error("Couldn't request WebGPU adapter.");}
this._device=await adapter.requestDevice();this._context=this._canvas.getContext("webgpu");this._canvasFormat=navigator.gpu.getPreferredCanvasFormat();this._context.configure({device:this._device,format:this._canvasFormat,});this.resizeCanvas();window.addEventListener('resize',this.resizeCanvas.bind(this));}
resizeCanvas(){const devicePixelRatio=window.devicePixelRatio||1;const width=window.innerWidth*devicePixelRatio;const height=window.innerHeight*devicePixelRatio;this._canvas.width=width;this._canvas.height=height;this._canvas.style.width=`${900}px`;this._canvas.style.height=`${900}px`;this._canvas.style.transformOrigin="center";this.render();}
async appendSceneObject(obj){await obj.init();this._objects.push(obj);}
renderToSelectedView(outputView){for(const obj of this._objects){obj?.updateGeometry();}
let encoder=this._device.createCommandEncoder();const pass=encoder.beginRenderPass({colorAttachments:[{view:outputView,clearValue:this._clearColor,loadOp:"clear",storeOp:"store",}]});for(const obj of this._objects){obj?.render(pass);}
pass.end();const computePass=encoder.beginComputePass();for(const obj of this._objects){obj?.compute(computePass);}
computePass.end();const commandBuffer=encoder.finish();this._device.queue.submit([commandBuffer]);}
render(){this.renderToSelectedView(this._context.getCurrentTexture().createView());}}
class FilteredRenderer extends Renderer{constructor(canvas){super(canvas);this._filters=[];}
async init(){if(!navigator.gpu){throw Error("WebGPU is not supported in this browser.");}
const adapter=await navigator.gpu.requestAdapter();if(!adapter){throw Error("Couldn't request WebGPU adapter.");}
this._device=await adapter.requestDevice();this._context=this._canvas.getContext("webgpu");this._canvasFormat="rgba8unorm";this._context.configure({device:this._device,format:this._canvasFormat,});this._shaderModule=this._device.createShaderModule({label:"Image Filter Renderer Shader",code:`
      @vertex
      fn vertexMain(@builtin(vertex_index) vIdx: u32) -> @builtin(position) vec4f {
        var pos = array<vec2f, 6>(
          vec2f(-1, -1), vec2f(1, -1), vec2f(-1, 1),
          vec2f(-1, 1), vec2f(1, -1), vec2f(1, 1)
        );
        return vec4f(pos[vIdx], 0, 1);
      }
      
      @group(0) @binding(0) var inTexture: texture_2d<f32>;
      @group(0) @binding(1) var inSampler: sampler;
      
      @fragment
      fn fragmentMain(@builtin(position) fragCoord: vec4f) -> @location(0) vec4f {
        let uv = fragCoord.xy / vec2f(textureDimensions(inTexture, 0));
        return textureSample(inTexture, inSampler, uv);
      }
      `});this._pipeline=this._device.createRenderPipeline({label:"Image Filter Renderer Pipeline",layout:"auto",vertex:{module:this._shaderModule,entryPoint:"vertexMain",},fragment:{module:this._shaderModule,entryPoint:"fragmentMain",targets:[{format:this._canvasFormat}]}});this._sampler=this._device.createSampler({label:"Image Filter Renderer Sampler",magFilter:"linear",minFilter:"linear"});this.resizeCanvas();window.addEventListener('resize',this.resizeCanvas.bind(this));}
resizeCanvas(){const devicePixelRatio=window.devicePixelRatio||1;const width=window.innerWidth*devicePixelRatio;const height=window.innerHeight*devicePixelRatio;let imgSize={width:width,height:height};this._textures=[];this._textures.push(this._device.createTexture({size:imgSize,format:this._canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,}),this._device.createTexture({size:imgSize,format:this._canvasFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,}),);for(const obj of this._filters){obj._imgWidth=this._textures[0].width;obj._imgHeight=this._textures[0].height;obj.updateGeometry();}
super.resizeCanvas();}
async appendFilterObject(obj){await obj.init();obj._imgWidth=this._textures[0].width;obj._imgHeight=this._textures[0].height;obj.updateGeometry();this._filters.push(obj);}
render(){super.renderToSelectedView(this._textures[0].createView());for(let i=0;i<this._filters.length;++i){let encoder=this._device.createCommandEncoder();const computePass=encoder.beginComputePass();this._filters[i].createBindGroup(this._textures[i%2],this._textures[(i+1)%2]);this._filters[i].compute(computePass);computePass.end();const commandBuffer=encoder.finish();this._device.queue.submit([commandBuffer]);}
let encoder=this._device.createCommandEncoder();const pass=encoder.beginRenderPass({colorAttachments:[{view:this._context.getCurrentTexture().createView(),clearValue:this._clearColor,loadOp:"clear",storeOp:"store",}]});const bindGroup=this._device.createBindGroup({label:"Image Filter Renderer Bind Group",layout:this._pipeline.getBindGroupLayout(0),entries:[{binding:0,resource:this._textures[this._filters.length%2].createView()},{binding:1,resource:this._sampler}],});pass.setPipeline(this._pipeline);pass.setBindGroup(0,bindGroup);pass.draw(6);pass.end();const commandBuffer=encoder.finish();this._device.queue.submit([commandBuffer]);}}
class SceneObject{static _objectCnt=0;constructor(device,canvasFormat){if(this.constructor==SceneObject){throw new Error("Abstract classes can't be instantiated.");}
this._device=device;this._canvasFormat=canvasFormat;SceneObject._objectCnt+=1;}
getName(){return this.constructor.name+" "+SceneObject._objectCnt.toString();}
async init(){await this.createGeometry();await this.createShaders();await this.createRenderPipeline();await this.createComputePipeline();}
async createGeometry(){throw new Error("Method 'createGeometry()' must be implemented.");}
updateGeometry(){}
loadShader(filename){return new Promise((resolve,reject)=>{const xhttp=new XMLHttpRequest();xhttp.open("GET",filename);xhttp.setRequestHeader("Cache-Control","no-cache, no-store, max-age=0");xhttp.onload=function(){if(xhttp.readyState===XMLHttpRequest.DONE&&xhttp.status===200){resolve(xhttp.responseText);}
else{reject({status:xhttp.status,statusText:xhttp.statusText});}};xhttp.onerror=function(){reject({status:xhttp.status,statusText:xhttp.statusText});};xhttp.send();});}
async createShaders(){throw new Error("Method 'createShaders()' must be implemented.");}
async createRenderPipeline(){throw new Error("Method 'createRenderPipeline()' must be implemented.");}
render(pass){throw new Error("Method 'render(pass)' must be implemented.");}
async createComputePipeline(){throw new Error("Method 'createComputePipeline()' must be implemented.");}
compute(pass){throw new Error("Method 'compute(pass)' must be implemented.");}}
class Standard2DFullScreenObject extends SceneObject{constructor(device,canvasFormat,img){super(device,canvasFormat);this._img=new Image();this._img.src=img;}
async createGeometry(){await this._img.decode();this._bitmap=await createImageBitmap(this._img);this._texture=this._device.createTexture({label:"Texture "+this.getName(),size:[this._bitmap.width,this._bitmap.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,});this._device.queue.copyExternalImageToTexture({source:this._bitmap},{texture:this._texture},[this._bitmap.width,this._bitmap.height]);this._sampler=this._device.createSampler({magFilter:"linear",minFilter:"linear"});}
async createShaders(){let shaderCode=await this.loadShader("./shaders/optimized_fullscreen.wgsl");this._shaderModule=this._device.createShaderModule({label:" Shader "+this.getName(),code:shaderCode,});}
async createRenderPipeline(){this._renderPipeline=this._device.createRenderPipeline({label:"Render Pipeline "+this.getName(),layout:"auto",vertex:{module:this._shaderModule,entryPoint:"vertexMain",},fragment:{module:this._shaderModule,entryPoint:"fragmentMain",targets:[{format:this._canvasFormat}]}});this._bindGroup=this._device.createBindGroup({layout:this._renderPipeline.getBindGroupLayout(0),entries:[{binding:0,resource:this._texture.createView(),},{binding:1,resource:this._sampler,}],});}
render(pass){pass.setPipeline(this._renderPipeline);pass.setBindGroup(0,this._bindGroup);pass.draw(6,1,0,0);}
async createComputePipeline(){}
compute(pass){}}
class Standard2DPGAPosedVertexColorObject extends SceneObject{constructor(device,canvasFormat,vertices,pose){super(device,canvasFormat);this._vertices=vertices;this._pose=pose;}
async createGeometry(){this._vertexBuffer=this._device.createBuffer({label:"Vertices "+this.getName(),size:this._vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,});this._device.queue.writeBuffer(this._vertexBuffer,0,this._vertices);this._vertexBufferLayout={arrayStride:6*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,format:"float32x2",offset:0,},{shaderLocation:1,format:"float32x4",offset:2*Float32Array.BYTES_PER_ELEMENT,}],};this._poseBuffer=this._device.createBuffer({label:"Pose "+this.getName(),size:this._pose.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,});this._device.queue.writeBuffer(this._poseBuffer,0,this._pose);}
updateGeometry(){this._device.queue.writeBuffer(this._poseBuffer,0,this._pose);}
async createShaders(){let shaderCode=await this.loadShader("./shaders/optimized_standard2dpgacolored.wgsl");this._shaderModule=this._device.createShaderModule({label:" Shader "+this.getName(),code:shaderCode,});}
async createRenderPipeline(){this._renderPipeline=this._device.createRenderPipeline({label:"Render Pipeline "+this.getName(),layout:"auto",vertex:{module:this._shaderModule,entryPoint:"vertexMain",buffers:[this._vertexBufferLayout]},fragment:{module:this._shaderModule,entryPoint:"fragmentMain",targets:[{format:this._canvasFormat}]}});this._bindGroup=this._device.createBindGroup({label:"Render Bind Group "+this.getName(),layout:this._renderPipeline.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this._poseBuffer},}],});}
render(pass){pass.setPipeline(this._renderPipeline);pass.setVertexBuffer(0,this._vertexBuffer);pass.setBindGroup(0,this._bindGroup);pass.draw(this._vertices.length/6);}
async createComputePipeline(){}
compute(pass){}}
class LineStrip2DVertexObject extends SceneObject{constructor(device,canvasFormat,vertices){super(device,canvasFormat);this._vertices=vertices;}
async createGeometry(){this._vertexBuffer=this._device.createBuffer({label:"Vertices "+this.getName(),size:this._vertices.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,});this._device.queue.writeBuffer(this._vertexBuffer,0,this._vertices);this._vertexBufferLayout={arrayStride:2*Float32Array.BYTES_PER_ELEMENT,attributes:[{shaderLocation:0,format:"float32x2",offset:0,}],};}
async createShaders(){let shaderCode=await this.loadShader("/shaders/standard2d.wgsl");this._shaderModule=this._device.createShaderModule({label:" Shader "+this.getName(),code:shaderCode,});}
async createRenderPipeline(){this._renderPipeline=this._device.createRenderPipeline({label:"Render Pipeline "+this.getName(),layout:"auto",vertex:{module:this._shaderModule,entryPoint:"vertexMain",buffers:[this._vertexBufferLayout]},fragment:{module:this._shaderModule,entryPoint:"fragmentMain",targets:[{format:this._canvasFormat}]},primitive:{topology:'line-strip'}});}
render(pass){pass.setPipeline(this._renderPipeline);pass.setVertexBuffer(0,this._vertexBuffer);pass.draw(this._vertices.length/2);}
async createComputePipeline(){}
compute(pass){}}
class DemoTreeObject extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let _vertices=new Float32Array([-0.025,-0.15,77.0/255,40.0/255,40.0/255,1,-0.025,-0.45,77.0/255,40.0/255,40.0/255,1,0.025,-0.45,77.0/255,40.0/255,40.0/255,1,-0.025,-0.15,77.0/255,40.0/255,40.0/255,1,0.025,-0.45,77.0/255,40.0/255,40.0/255,1,0.025,-0.15,77.0/255,40.0/255,40.0/255,1,0,0.05,34.0/255,110.0/255,34.0/255,1,-0.1,-0.15,34.0/255,90.0/255,34.0/255,1,0.1,-0.15,34.0/255,90.0/255,34.0/255,1,0,0.10,34.0/255,110.0/255,34.0/255,1,-0.1,-0.10,34.0/255,90.0/255,34.0/255,1,0.1,-0.10,34.0/255,90.0/255,34.0/255,1,0,0.15,34.0/255,110.0/255,34.0/255,1,-0.1,-0.05,34.0/255,90.0/255,34.0/255,1,0.1,-0.05,34.0/255,90.0/255,34.0/255,1,0,0.2,34.0/255,110.0/255,34.0/255,1,-0.1,0.0,34.0/255,90.0/255,34.0/255,1,0.1,0.0,34.0/255,90.0/255,34.0/255,1,]);super(device,canvasFormat,_vertices,pose);this._interval=100;this._t=0;this._step=1;this._pose0=[-1,0,0.5,0.5,0.5,0.5];this._pose1=[0,1,-0.5,0.5,0.5,0.5];}
updateGeometry(){this._pose[0]=this._pose0[0]*(1-this._t/this._interval)+this._pose1[0]*this._t/this._interval;this._pose[1]=this._pose0[1]*(1-this._t/this._interval)+this._pose1[1]*this._t/this._interval;this._pose[2]=this._pose0[2]*(1-this._t/this._interval)+this._pose1[2]*this._t/this._interval;this._pose[3]=this._pose0[3]*(1-this._t/this._interval)+this._pose1[3]*this._t/this._interval;this._t+=this._step;if(this._t>=100){this._step=-1;}
else if(this._t<=0){this._step=1;}
super.updateGeometry();}}
class PGA2D{static geometricProduct(a,b){return[a[0]*b[0]-a[1]*b[1],a[0]*b[1]+a[1]*b[0],a[0]*b[2]+a[1]*b[3]+a[2]*b[0]-a[3]*b[1],a[0]*b[3]-a[1]*b[2]+a[2]*b[1]+a[3]*b[0]];}
static reverse(a){return[a[0],-a[1],-a[2],-a[3]];}
static applyMotor(p,m){return PGA2D.geometricProduct(m,PGA2D.geometricProduct(p,PGA2D.reverse(m)));}
static motorNorm(m){return Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]+m[3]*m[3]);}
static createTranslator(dx,dy){return[1,0,dy/2,-dx/2]}
static createRotor(angle,cx=0,cy=0){return[Math.cos(angle/2),-Math.sin(angle/2),-cx*Math.sin(angle/2),-cy*Math.sin(angle/2)];}
static normaliozeMotor(m){let mnorm=PGA2D.motorNorm(m);if(mnorm==0.0){return[1,0,0,0];}
return[m[0]/mnorm,m[1]/mnorm,m[2]/mnorm,m[3]/mnorm];}
static applyMotorToPoint(p,m){let new_p=PGA2D.applyMotor([0,1,p[0],p[1]],m);return[new_p[2]/new_p[1],new_p[3]/new_p[1]];};}
function circleMaker(r,g,b,radius,centerx,centery){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(r/255);vertices[idx*18+3]=(g/255);vertices[idx*18+4]=(b/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(r/255);vertices[idx*18+9]=(g/255);vertices[idx*18+10]=(b/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(r/255);vertices[idx*18+15]=(g/255);vertices[idx*18+16]=(b/255);vertices[idx*18+17]=(1);i+=360.0/triangles
idx=idx+1;}
return vertices;}
function sunMaker(radius,centerx,centery){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(250.0/255);vertices[idx*18+3]=(231.0/255);vertices[idx*18+4]=(25.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(250.0/255);vertices[idx*18+9]=(231.0/255);vertices[idx*18+10]=(25.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(250.0/255);vertices[idx*18+15]=(141.0/255);vertices[idx*18+16]=(25.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
return vertices;}
class planetEarth extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.07;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(39.0/255);vertices[idx*18+3]=(86.0/255);vertices[idx*18+4]=(217.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(168.0/255);vertices[idx*18+9]=(132.0/255);vertices[idx*18+10]=(2.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(2.0/255);vertices[idx*18+15]=(168.0/255);vertices[idx*18+16]=(24.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=1.6;this._pose0=[-2.1,0,0.5,0.5,0.5,0.5];this._pose1=[-2.1,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetMercury extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.03;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(250.0/255);vertices[idx*18+3]=(137.0/255);vertices[idx*18+4]=(137.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(250.0/255);vertices[idx*18+9]=(137.0/255);vertices[idx*18+10]=(137.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(250.0/255);vertices[idx*18+15]=(137.0/255);vertices[idx*18+16]=(137.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=3;this._pose0=[-4,0,0.5,0.5,0.5,0.5];this._pose1=[-4,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetVenus extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.05;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(99.0/255);vertices[idx*18+3]=(62.0/255);vertices[idx*18+4]=(23.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(99.0/255);vertices[idx*18+9]=(62.0/255);vertices[idx*18+10]=(237.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(99.0/255);vertices[idx*18+15]=(62.0/255);vertices[idx*18+16]=(23.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=2;this._pose0=[-2.8,0,0.5,0.5,0.5,0.5];this._pose1=[-2.8,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetMars extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.05;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(209.0/255);vertices[idx*18+3]=(129.0/255);vertices[idx*18+4]=(0.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(209.0/255);vertices[idx*18+9]=(129.0/255);vertices[idx*18+10]=(0.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(209.0/255);vertices[idx*18+15]=(129.0/255);vertices[idx*18+16]=(0.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=1.2;this._pose0=[-1.75,0,0.5,0.5,0.5,0.5];this._pose1=[-1.75,0,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetSaturn extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.11;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(230.0/255);vertices[idx*18+3]=(222.0/255);vertices[idx*18+4]=(87.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(230.0/255);vertices[idx*18+9]=(222.0/255);vertices[idx*18+10]=(87.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(230.0/255);vertices[idx*18+15]=(222.0/255);vertices[idx*18+16]=(87.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=0.9;this._pose0=[-1.3,0,0.5,0.5,0.5,0.5];this._pose1=[-1.3,0,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetJupiter extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.15;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(171.0/255);vertices[idx*18+3]=(73.0/255);vertices[idx*18+4]=(24.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(212.0/255);vertices[idx*18+9]=(14.0/255);5
vertices[idx*18+10]=(0.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(255.0/255);vertices[idx*18+15]=(217.0/255);vertices[idx*18+16]=(218.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=0.8;this._pose0=[-1,0,0.5,0.5,0.5,0.5];this._pose1=[-1,0,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetUranus extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.09;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(100.0/255);vertices[idx*18+3]=(44.0/255);vertices[idx*18+4]=(130.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(100.0/255);vertices[idx*18+9]=(44.0/255);vertices[idx*18+10]=(130.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(100.0/255);vertices[idx*18+15]=(44.0/255);vertices[idx*18+16]=(130.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=0.7;this._pose0=[-0.85,0,0.5,0.5,0.5,0.5];this._pose1=[-0.85,0,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class planetNeptune extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let i=0;let idx=0;let triangles=100;let vertices=new Float32Array(3*triangles*6);let radius=0.1;let centerx=0.0;let centery=0.0
while(i<360){vertices[idx*18]=(radius*Math.cos((Math.PI/180.0)*(i)))+centerx;vertices[idx*18+1]=(radius*Math.sin((Math.PI/180.0)*(i)))+centery;vertices[idx*18+2]=(10.0/255);vertices[idx*18+3]=(47.0/255);vertices[idx*18+4]=(140.0/255);vertices[idx*18+5]=(1);vertices[idx*18+6]=(radius*Math.cos((Math.PI/180.0)*((i+360.0/triangles))))+centerx;vertices[idx*18+7]=(radius*Math.sin((Math.PI/180.0)*((i+360.0/triangles))))+centery;vertices[idx*18+8]=(10.0/255);vertices[idx*18+9]=(47.0/255);vertices[idx*18+10]=(140.0/255);vertices[idx*18+11]=(1);vertices[idx*18+12]=(centerx);vertices[idx*18+13]=(centery);vertices[idx*18+14]=(12.0/255);vertices[idx*18+15]=(177.0/255);vertices[idx*18+16]=(207.0/255);vertices[idx*18+17]=(1);i+=360.0/100
idx=idx+1;}
super(device,canvasFormat,vertices,pose);this._interval=100;this._t=0;this._step=0.5;this._pose0=[-0.8,0,0.5,0.5,0.5,0.5];this._pose1=[-0.8,0,1,-0.5,0.5,0.5,0.5];}
s
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
class rocketship extends Standard2DPGAPosedVertexColorObject{constructor(device,canvasFormat,pose){let vertices1=new Float32Array([0,0,1,1,1,1,0.15,0,1,1,1,1,0.15,0.3,1,1,1,1,0.15,0.3,1,1,1,1,0,0,1,1,1,1,0,0.3,1,1,1,1,0,0.3,227.0/255,2.0/255,92.0/255,1,0.075,0.4,227.0/255,2.0/255,92.0/255,1,0.15,0.3,227.0/255,2.0/255,92.0/255,1,0,0.3,227.0/255,2.0/255,92.0/255,1,-0.075,0.05,227.0/255,2.0/255,92.0/255,1,0.0,0.05,227.0/255,2.0/255,92.0/255,1,0.15,0.3,227.0/255,2.0/255,92.0/255,1,0.22,0.05,227.0/255,2.0/255,92.0/255,1,0.15,0.05,227.0/255,2.0/255,92.0/255,1,0,0,227.0/255,2.0/255,92.0/255,1,-0.075,-0.075,227.0/255,2.0/255,92.0/255,1,0.0,-0.075,227.0/255,2.0/255,92.0/255,1,0.15,0.0,227.0/255,2.0/255,92.0/255,1,0.15,-0.075,227.0/255,2.0/255,92.0/255,1,0.22,-0.075,227.0/255,2.0/255,92.0/255,1,0,-0.075,227.0/255,2.0/255,92.0/255,1,0.15,-0.075,227.0/255,2.0/255,92.0/255,1,0,0,227.0/255,2.0/255,92.0/255,1,0.15,-0.075,227.0/255,2.0/255,92.0/255,1,0.15,0,227.0/255,2.0/255,92.0/255,1,0,0,227.0/255,2.0/255,92.0/255,1,]);super(device,canvasFormat,vertices1,pose);this._interval=100;this._t=0;this._step=2;this._pose0=[-1,0,0.5,0.5,0.5,0.5];this._pose1=[0,1,-0.5,0.5,0.5,0.5];this._pose2=[1,-1,-0.5,0.5,0.5,0.5];}
updateGeometry(){let angle=2*Math.PI*(this._t/this._interval)
this._pose[0]=this._pose0[0]*Math.cos(angle)-this._pose0[1]*Math.sin(angle);this._pose[1]=this._pose0[0]*Math.sin(angle)+this._pose0[1]*Math.cos(angle);this._pose[2]=this._pose0[2];this._pose[3]=this._pose0[3];this._t=this._t+this._step;super.updateGeometry();}}
async function init(){const canvasTag=document.createElement('canvas');canvasTag.id="renderCanvas";document.body.appendChild(canvasTag);const renderer=new FilteredRenderer(canvasTag);await renderer.init();await renderer.appendSceneObject(new Standard2DFullScreenObject(renderer._device,renderer._canvasFormat,"./assets/galaxy.jpeg"));const devicePixelRatio=window.devicePixelRatio||1;const width=window.innerWidth*devicePixelRatio;const height=window.innerHeight*devicePixelRatio;canvasTag.width=width;canvasTag.height=height;var vertices1=new Float32Array([0,0.5,1,0,0,1,-0.5,0,0,1,0,1,0.5,0,0,0,1,1,]);var pose=[1,0,0,0,1,1];pose=new Float32Array(pose);var vertices2=new Float32Array([0,-0.6,-0.5,-0.1,0.5,-0.1,0,-0.6,]);var circleVertices1=circleMaker(120,255,40,0.1,0.5,0.5)
var sun=sunMaker(0.15,0,0)
var mercury=circleMaker(250,137,137,0.015,0.1,0.1)
await renderer.appendSceneObject(new Standard2DPGAPosedVertexColorObject(renderer._device,renderer._canvasFormat,sun,pose));await renderer.appendSceneObject(new planetMercury(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetEarth(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetVenus(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetMars(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetSaturn(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetJupiter(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetUranus(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new planetNeptune(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));await renderer.appendSceneObject(new rocketship(renderer._device,renderer._canvasFormat,new Float32Array([1,0,0,0,0.5,0.5])));let angle=Math.PI/100;let center=[0,0];let dr=PGA2D.normaliozeMotor([Math.cos(angle/2),-Math.sin(angle/2),-center[0]*Math.sin(angle/2),-center[1]*Math.sin(angle/2)]);setInterval(()=>{renderer.render();let newmotor=PGA2D.normaliozeMotor(PGA2D.geometricProduct(dr,[pose[0],pose[1],pose[2],pose[3]]));pose[0]=newmotor[0];pose[1]=newmotor[1];pose[2]=newmotor[2];pose[3]=newmotor[3];},100);return renderer;}
init().then(ret=>{console.log(ret);}).catch(error=>{const pTag=document.createElement('p');pTag.innerHTML=navigator.userAgent+"</br>"+error.message;document.body.appendChild(pTag);document.getElementById("renderCanvas").remove();});